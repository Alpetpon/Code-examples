Техническая Документация:
1. Введение:
Проект "Система продажи авиабилетов в кассе аэропорта" предназначен для автоматизации процесса управления информацией о рейсах и продажи авиабилетов в аэропортской кассе. Ниже представлены ключевые аспекты технической реализации проекта.

2. Технологии и Инструменты:
Язык программирования: Python
Формат хранения данных: JSON
Интерфейс командной строки для взаимодействия с системой.
3. Структура Кода:
3.1. AirportSystem Класс:
__init__(self, flights_file="flights.json"): Конструктор класса, инициализирующий систему и загружающий данные из файла.
load_flights(self): Метод для загрузки данных о рейсах из файла.
save_flights(self): Метод для сохранения данных о рейсах в файл.
add_flight(self, flight_number, destination, departure_time, arrival_time, distance): Метод для добавления нового рейса.
check_available_seats(self, flight_number): Метод для проверки доступных мест на рейсе.
calculate_ticket_price(self, flight_number, distance): Метод для расчета стоимости билета.

4. Тестирование:
Проект поддерживает модульное тестирование с использованием встроенного модуля unittest.
Тесты покрывают основные сценарии использования, включая добавление рейсов, бронирование мест, проверку доступных мест и расчет стоимости билетов.
5. Обработка Исключений:
Система обрабатывает исключения, такие как FileNotFoundError при отсутствии файла с данными.
6. Зависимости:
Проект зависит от стандартной библиотеки Python для работы с файлами и JSON.
7. Инструкции по Установке и Запуску:
Склонировать репозиторий.
Запустить код с помощью интерпретатора Python.



Программная Документация:
1. Как использовать систему:
Создайте экземпляр AirportSystem.
Добавьте рейс с помощью метода add_flight.
Используйте методы для проверки доступных мест и расчета стоимости билетов.
2. Структура данных:
Данные о рейсах хранятся в формате JSON в файле flights.json.
Структура данных о рейсе: {"flight_number": ..., "destination": ..., "departure_time": ..., "arrival_time": ..., "distance": ..., "available_seats": ...}.
3. Расширение функциональности:
Для расширения функциональности системы, добавьте новые методы или атрибуты к классу AirportSystem.

4. Примеры:
4.1. Добавление нового рейса:
airport_system.add_flight("FL456", "Los Angeles", "14:00", "17:00", 4000)
4.2. Проверка доступных мест:
available_seats = airport_system.check_available_seats("FL456")
print(f"На рейсе FL456 доступно {available_seats} свободных мест.")
4.3. Расчет стоимости билета:
distance = float(input("Введите километраж рейса: "))
ticket_price = airport_system.calculate_ticket_price("FL456", distance)
print(f"Стоимость билета: ${ticket_price:.2f}")
